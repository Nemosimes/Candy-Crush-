#include <iostream>  //c commands
#include <string>    //using strings 
#include <chrono>    // classic mode clock
#include<thread>     //timeattack mode timer - lives filler
#include<Windows.h>  // sleep command
#include <fstream>   //file stream 
#include <direct.h>  

using namespace std;
#pragma warning(disable:4996)

string board[9][9];
int nMoves = 0;
int nChar;
int limitMoves = 10;
int score = 0;
bool played = false;
bool playAgain = true;
double seconds = 0;
int SECONDS = 0;
int Gmode;
double tLimit;
bool swapped = false;
bool repeat = true;
int c1Row, c1Col, c2Row, c2Col;
int subMenu;
int lives = 3;
bool quit = false;

struct hint
{
	int c1r, c1c, c2r, c2c;
}hintS[8];
struct player {
	char name[20], pass[20];
	int bestscore[2];
	bool winner;
};
const  char * FilePath = "player.data";
const  char * BackFilePath = "player.bak";

void startgame(player &p);
void saveplayer(struct player p1);
void settings(player &p);
void inputcheck(int&);
bool readdata(player &p1, char pass[20]);
int addNewPlayer(player &p);
void  displayplayer(player &p1);
bool Checkforpassword(char pass[20]);
bool delplayer(char pass[20]);
void updateScore(char pass[], int score, int mood);
void bestscore(player &p, int score, int);
void leaderboard();
int ReadAllPlayers(int);
void eatOneCandy(int, int);
void boardShape(int);
void Classic_Level(int);
void Attack_Level(int);
void isWinner(player &p, int);
void showFulledBoard();
void checkAllBoard();
void timeAttack();
void play(player &p);
void mainMenu(player p);
void Credits();
void swapInput();
void back();
void swap();
void eat$candies(int row, int col);
void checkEqualCells(int cRow, int cCol, bool& swapped);
void horizontalEat(int myRow, int firstCol, int horizontalEqualCells, string value, int swappedCol);
void verticalEat(int myRow, int myCol, int verticalEqualCells, string value, int swappedRow);
void livesfiller();
void listOfSwaps();

int main() {
	std::thread revive(livesfiller);
	player p;
	startgame(p);
	while (repeat || playAgain)
	{
		system("Cls");
		seconds = 0;
		SECONDS = 0;
		score = 0;
		nMoves = 0;
		p.winner = false;
		mainMenu(p);
		switch (subMenu)
		{
		case 1:
			if (lives) {
				lives--;
				play(p);
			}
			else {
				cout << "No lives Left :( \n";
				back();
			}
			break;
		case 2:	 leaderboard(); break;
		case 3: Credits(); 	back(); break;
		case 4: settings(p); break;
		case 5:revive.join(); return 0; break;
		}

	}
	revive.join();
	return 0;
}
void Attack_Level(int gameDiff) {
	switch (gameDiff) {
	case 1: tLimit = 7 * 60; break;
	case 2: tLimit = 5 * 60; break;
	case 3: tLimit = 3 * 60; break;
	}
	nChar = 5;
	for (int r = 0; r < 9; r++)
	{
		for (int c = 0; c < 9; c++)
		{
			board[r][c] = " ";
			board[r][c] += to_string(1 + rand() % (nChar));
		}
	}
}
void Classic_Level(int gameDiff)
{
	switch (gameDiff) {
	case 1: nChar = 5; boardShape(nChar); break;
	case 2: nChar = 7; boardShape(nChar); break;
	case 3: nChar = 9; boardShape(nChar); break;
	}
}
void boardShape(int nChar) {
	for (int r = 0; r < 9; r++)
	{
		for (int c = 0; c < 9; c++)
		{
			board[r][c] = " ";
			board[r][c] += to_string(1 + rand() % (nChar));
		}
	}
}
void isWinner(player &p, int score)
{
	if (nMoves >= limitMoves)
	{
		if (score <= 200)
		{
			cout << endl << nMoves << "/" << limitMoves << "\t" << "Score :" << score << endl;
			cout << "You lost,\t" << " Time taken :" << SECONDS / 60 << " : " << SECONDS - ((SECONDS / 60) * 60) << endl;
		}
		else if (score >= 200 && score < 400)
		{
			lives++;
			cout << endl << nMoves << "/" << limitMoves << "\t" << "Score :" << score << endl;
			cout << "You won,\t" << "You got *" << " Time taken :" << SECONDS / 60 << " : " << SECONDS - ((SECONDS / 60) * 60) << endl;
		}
		else if (score >= 400 && score < 600)
		{
			lives++;
			cout << endl << nMoves << "/" << limitMoves << "\t" << "Score :" << score << endl;
			cout << "You won,\t" << "You got **" << " Time taken :" << SECONDS / 60 << " : " << SECONDS - ((SECONDS / 60) * 60) << endl;
		}
		else
		{
			lives++;
			cout << endl << nMoves << "/" << limitMoves << "\t" << "Score :" << score << endl;
			cout << "You won,\t" << "You got ***" << " Time taken :" << SECONDS / 60 << " : " << SECONDS - ((SECONDS / 60) * 60) << endl;
		}

		bestscore(p, score, 0);
		p.winner = true;
		system("pause");
	}
}
void showFulledBoard()
{
	int row = 0;
	cout << endl << endl << "\t   1    2    3    4    5    6    7    8    9" << "\n";
	for (int i = 0; i < 19; i++)
	{

		if (i % 2 == 0)
		{
			cout << "\t ____ ____ ____ ____ ____ ____ ____ ____ ____"; cout << endl;

		}
		else
		{
			cout << row + 1 << "\t|";
			for (int col = 0; col < 9; col++)
			{
				cout << " " << board[row][col] << " |";

			}cout << endl; row++;
		}
	}
}
void swap()
{

	bool moveFound = true;
	swapped = false;
	swapInput();
	cout << "with ( row , col ) : "; inputcheck(c2Row); inputcheck(c2Col);

	c1Col--; c1Row--; c2Col--; c2Row--; // bec array is 0-based
	if ((c1Row < 0) || (c2Row < 0) || (c2Col < 0) || (c2Col < 0)) {
		cout << "Invalid cell data \n"; moveFound = false;
	}
	else if ((c1Row > 8) || (c2Row > 8) || (c2Col > 8) || (c2Col > 8)) {
		cout << "Invalid cell data \n"; moveFound = false;
	}
	else if (c1Row == c2Row && c1Col == c2Col) {
		cout << "Couldn't swap the same cell \n"; moveFound = false;
	}
	else if (((c1Row == c2Row) && ((c1Col - c2Col == 1) || (c1Col - c2Col == -1)))
		||
		((c1Col == c2Col) && ((c1Row - c2Row == 1) || (c1Row - c2Row == -1))))
	{
		// now,  I have 2 valid cells
		if (board[c1Row][c1Col].find('$') != string::npos) // if i swapped c1 ($) with c2 (4)
		{
			eatOneCandy(c1Row, c1Col); // eat c1 ($) candy
			eat$candies(c2Row, c2Col); // eat every candy contain c2's value (4)
		}
		else if (board[c2Row][c2Col].find('$') != string::npos) // if i swapped c1 (4) with c2 ($)
		{
			eatOneCandy(c2Row, c2Col); // eat c2 ($) candy
			eat$candies(c1Row, c1Col); // every candy contain c1's value (4)
		}
		else // now, i havent find $, i will search for horizontal/vertical eating 
		{
			swap(board[c2Row][c2Col], board[c1Row][c1Col]);
			checkEqualCells(c1Row, c1Col, swapped); // search for horizontal and vertical in c1 area
			if (swapped == false)
			{
				checkEqualCells(c2Row, c2Col, swapped); // search for horizontal and vertical in c2 area
			}
			if (swapped == false)
			{
				cout << "Oh oh Try Again ! " << endl; // i havent find any eating 
				moveFound = true;
				swap(board[c2Row][c2Col], board[c1Row][c1Col]); // swap again to return every thing, like nothing was happened
			}
		}
	}
	else
	{
		cout << "Invalid cell data" << endl; moveFound = false;
	}
	if (moveFound) nMoves++;
	checkAllBoard();
}
void eatOneCandy(int startedRow, int myCol)
{
	for (int i = startedRow; i >= 1; i--)
	{
		board[i][myCol] = board[i - 1][myCol];
	}
	board[0][myCol] = " ";
	board[0][myCol] += to_string(1 + rand() % (nChar));
}
void eat$candies(int row, int col)
{
	string temp = board[row][col];
	board[row][col].erase(0, 1);
	string value = board[row][col];
	board[row][col] = temp;

	string astrikValue = "*", modValue = "%", normalValue = " ";
	astrikValue += value, modValue += value, normalValue += value;
	if (board[row][col] == normalValue)
	{
		for (int r = 0; r < 9; r++)
		{
			for (int c = 0; c < 9; c++)
			{
				if (board[r][c].find(value) != string::npos) // i will eat this candy, but first i have to check does it contain * % # or not 
				{
					if (board[r][c] == astrikValue) // eat whole row
					{
						for (int i = r; i >= 1; i--)
						{
							for (int j = 0; j < 9; j++)
							{

								board[i][j] = board[i - 1][j];
							}
						}
						for (int i = 0; i < 9; i++)
						{
							board[0][i] = " ";
							board[0][i] += to_string(1 + rand() % nChar);
							// generate new numbers in first row
						}
						score += 90;

					}
					else if (board[r][c] == modValue) // eat whole col
					{
						for (int i = 0; i < 9; i++)
						{
							board[i][c] = " ";
							board[i][c] += to_string(1 + rand() % (nChar));
						}
					}
					else if (board[r][c] == normalValue) { // eat one normal candy
						eatOneCandy(r, c);
					}
				}
			}
		}
	}
	else if (board[row][col] == astrikValue) // swaped $ with * , even normal cells will eat whole row
	{
		for (int r = 0; r < 9; r++)
		{
			for (int c = 0; c < 9; c++)
			{
				if (board[r][c].find(value) != string::npos)
				{
					if (board[r][c] == astrikValue || board[r][c] == normalValue)// swaped $ with * , even normal cells will eat whole row
					{
						for (int i = 0; i < 9; i++)
						{
							board[r][i] = " ";
							board[r][i] += to_string(1 + rand() % (nChar));
						}
					}
					else if (board[r][c] == modValue) // eat whole col
					{
						for (int i = 0; i < 9; i++)
						{
							board[i][c] = " ";
							board[i][c] += to_string(1 + rand() % (nChar));
						}
					}
				}
			}
		}
	}
	else if (board[row][col] == modValue) // swaped $ with % , even normal cells will eat whole row
	{
		for (int r = 0; r < 9; r++)
		{
			for (int c = 0; c < 9; c++)
			{
				// m7tag test cases kter 
				if (board[r][c].find(value) != string::npos)
				{
					if (board[r][c] == astrikValue) // eat whole row
					{
						for (int i = 0; i < 9; i++)
						{
							board[r][i] = " ";
							board[r][i] += to_string(1 + rand() % (nChar));
						}
					}
					else if (board[r][c] == modValue || board[r][c] == normalValue) // even normal cells will eat whole col
					{
						for (int i = 0; i < 9; i++)
						{
							board[i][c] = " ";
							board[i][c] += to_string(1 + rand() % (nChar));
						}
					}
				}
			}
		}
	}
}
void horizontalEat(int myRow, int firstCol, int horizontalEqualCells, string value, int swappedCol)
{
	bool astrik = false; int mod[9] = {};
	int modCounter = 0;
	// searching for special chars in eating cells
	for (int i = 0; i < horizontalEqualCells; i++)
	{
		if (board[myRow][firstCol + i].find("*") != string::npos) { astrik = true; }
		else if (board[myRow][firstCol + i].find("%") != string::npos) { mod[modCounter] = firstCol + i; modCounter++; }
	}
	if (astrik == false) {
		// eating normal horizontal
		// shifting cells
		for (int i = myRow; i >= 1; i--)
		{
			for (int j = 0; j < horizontalEqualCells; j++)
			{
				if (firstCol + j == swappedCol && horizontalEqualCells > 3)
				{
					continue;
				}
				else {
					board[i][firstCol + j] = board[i - 1][firstCol + j];
				}
			}
		}
		// generate new numbers in first row
		for (int j = 0; j < horizontalEqualCells; j++)
		{
			if (firstCol + j == swappedCol && horizontalEqualCells > 3)
			{
				continue;
			}
			else {
				board[0][firstCol + j] = " ";
				board[0][firstCol + j] += to_string(1 + rand() % nChar);
			}
		}
		score += horizontalEqualCells * 10;
	}
	else if (astrik == true) // eating whole row bec i founded *
	{
		for (int i = myRow; i >= 1; i--)
		{
			for (int j = 0; j < 9; j++)
			{

				board[i][j] = board[i - 1][j];
			}
		}
		for (int i = 0; i < 9; i++)
		{
			board[0][i] = " ";
			board[0][i] += to_string(1 + rand() % nChar);
			// generate new numbers in first row
		}
		score += 90;
	}

	// eating whole cols depending on how many % i found 
	for (int i = 0; i < modCounter; i++)
	{
		for (int row = 0; row < 9; row++)
		{
			board[row][mod[modCounter]] = " ";
			board[row][mod[modCounter]] += to_string(1 + rand() % nChar);
		}
	}
	score += modCounter * 90;
	if (horizontalEqualCells == 4)
	{
		board[myRow][swappedCol] = "*";
		board[myRow][swappedCol] += value;
	}
	else if (horizontalEqualCells > 4) {
		board[myRow][swappedCol] = " $";
	}

}
void verticalEat(int myRow, int myCol, int verticalEqualCells, string value, int swappedRow)  //myrow is first remarked cell
{
	bool mod = false; int astrik[9] = {};
	int astrikCounter = 0;
	// to check does eating cells contains special chars or not
	for (int i = 0; i < verticalEqualCells; i++)
	{
		if (board[myRow + i][myCol].find("*") != string::npos) { astrik[astrikCounter] = myRow + i; astrikCounter++; }
		else if (board[myRow + i][myCol].find("%") != string::npos) { mod = true; }
	}
	// shifting normal cells           starting from first i=remarked cell
	for (int i = myRow; i >= 1; i--)
	{
		board[i + (verticalEqualCells - 1)][myCol] = board[i - 1][myCol];            //above remarked down to remarked
	}
	// generating new candies
	for (int i = verticalEqualCells - 1; i >= 0; i--)
	{
		board[i][myCol] = " ";
		board[i][myCol] += to_string(1 + rand() % nChar);
	}
	score += verticalEqualCells * 10;
	if (mod == true)
	{
		for (int i = 0; i < 9; i++)
		{
			board[i][myCol] = " ";
			board[i][myCol] += to_string(1 + rand() % nChar);
		}
		score += 90;
	}
	//astrik
	for (int i = 0; i < astrikCounter; i++)
	{
		for (int i = astrik[astrikCounter]; i >= 1; i--) // starting from myrow till 2nd row (no.1) 0-based
		{
			// shifhing
			for (int j = 0; j < 9; j++)
			{
				board[i][j] = board[i - 1][j];
			}
		}
		// generate new numbers in first row
		for (int i = 0; i < 9; i++)
		{
			board[0][i] = " ";
			board[0][i] += to_string(1 + rand() % nChar);
		}
	}
	score += astrikCounter * 90;

	if (verticalEqualCells == 4)
	{
		board[swappedRow][myCol] = "%";
		board[swappedRow][myCol] += value;
	}
	else if (verticalEqualCells > 4)
	{
		board[swappedRow][myCol] = " $";
	}
	checkAllBoard();
}

void checkEqualCells(int cRow, int cCol, bool& swapped)
{
	int horizontalEqualCellsCounter = 1, verticalEqualCellsCounter = 1, enteredCol = cCol, enteredRow = cRow;
	for (int cCol = 0; cCol < 9; cCol++)
	{
		string temp = board[cRow][cCol];
		board[cRow][cCol].erase(0, 1);
		string value = board[cRow][cCol];
		board[cRow][cCol] = temp;

		if ((board[cRow][cCol].find(value) != string::npos && board[cRow][cCol + 1].find(value) != string::npos) && cCol != 8) { horizontalEqualCellsCounter++; }
		else if (horizontalEqualCellsCounter < 3 && cCol != 8) { horizontalEqualCellsCounter = 1; }
		else if (horizontalEqualCellsCounter >= 3 || (cCol == 8 && horizontalEqualCellsCounter >= 3))
		{
			horizontalEat(cRow, cCol - (horizontalEqualCellsCounter - 1), horizontalEqualCellsCounter, value, enteredCol);    //cCol-(horizontalEqualCellsCounter-1)to return first col
			swapped = true;
			break;
		}
	}
	if (swapped == false) {
		for (int cRow = 0; cRow < 9; cRow++) {
			string value;
			string temp = board[cRow][cCol];
			board[cRow][cCol].erase(0, 1);
			value = board[cRow][cCol];
			board[cRow][cCol] = temp;

			if ((board[cRow][cCol].find(value) != string::npos && board[cRow + 1][cCol].find(value) != string::npos) && cRow != 8) { verticalEqualCellsCounter++; }
			else if (verticalEqualCellsCounter < 3) { verticalEqualCellsCounter = 1; }
			else if (verticalEqualCellsCounter >= 3 || (cRow == 8 && verticalEqualCellsCounter >= 3)) {

				verticalEat(cRow - (verticalEqualCellsCounter - 1), cCol, verticalEqualCellsCounter, value, enteredRow); // to return first row 
				swapped = true;
				break;
			}
		}
	}
}

void play(player &p)
{
	int gameDiff = -1;
	bool tryAgain = true;
	while (tryAgain)
	{

		cout << "Now, You Have " << lives << " live/s \n";
		cout << "Choose your game mode : 1)Classic  2)Time attack \t\t";
		inputcheck(Gmode); // cin
		cout << endl;
		cout << "Choose difficulty : 1)Easy\t2)Normal\t3)Hard : \t";
		inputcheck(gameDiff);//cin
		cout << endl;
		score = 0;
		if (Gmode == 1) {
			switch (gameDiff) {
			case 1: Classic_Level(gameDiff); tryAgain = false; break;
			case 2: Classic_Level(gameDiff); tryAgain = false; break;
			case 3: Classic_Level(gameDiff); tryAgain = false; break;
			default:cout << "Invalid level \n";
			}
		}
		else if (Gmode == 2) {
			switch (gameDiff) {
			case 1: Attack_Level(gameDiff); tryAgain = false; break;
			case 2: Attack_Level(gameDiff); tryAgain = false; break;
			case 3: Attack_Level(gameDiff); tryAgain = false; break;
			default:cout << "Invalid level \n";
			}
		}
	}
	if (Gmode == 1) {
		while (!p.winner)
		{
			//system("Cls"); // It is commented to trace the code

			checkAllBoard();
			checkAllBoard();
			showFulledBoard();
			auto start = std::chrono::steady_clock::now();
			cout << endl << nMoves << "/" << limitMoves << "\t" << "Score :" << score << endl;
			swap();
			if (c1Row < 0) {
				return;
			}
			played = false;
			auto end = std::chrono::steady_clock::now();
			double t_ms = double(std::chrono::duration_cast<std::chrono::milliseconds>(end - start).count());
			seconds = t_ms / 1000;
			SECONDS += seconds;
			isWinner(p, score);
		}
	}
	else if (Gmode == 2) {
		std::thread working(timeAttack);
		while (SECONDS < tLimit) {
			system("Cls"); // i commented it just for trace el code
			checkAllBoard();
			checkAllBoard();
			showFulledBoard();
			cout << endl << "Score :" << score << endl;
			swap();
			played = false;
			if (c1Row < 0) {
				return;
			}
		}
		bestscore(p, score, 1);
		played = false;
		cout << "Time up\n";
		working.join();
		system("pause");
	}

}
void timeAttack() {
	while (true) {
		Sleep(1000);
		SECONDS++;
		if (SECONDS >= tLimit) {
			break;
		}
	}
}
void mainMenu(player p) {
	cout << "\n\t\tCandy Crush Game\n\nWelcome " << p.name << "\n\t Your Best Score in classic mood is :" << p.bestscore[0] << "\n\t Your Best Score in time attack mood is :" << p.bestscore[1] << "\n\t You have " << lives << " lives/s\n\nPlease Enter..\n";
	cout << "(1) Play\n" << "(2) Leaderboard \n" << "(3) Credits \n" << "(4) settings\n" << "(5) quit\n";
	inputcheck(subMenu); // cin 
}
void Credits() {
	cout << "Team leader : Sahar Saber \n" << "Member : Nermin Ezzy \n " << "Member : Sara Moshier \n" << "Member : Maria Nabil \n" << "Member : Sara Maher \n" << "Member : Muhammad Ayman Ezzat \n";
}
void inputcheck(int& var)
{
	cin >> var;
	while (true)
	{

		if (cin.fail())
		{
			cin.clear();
			cin.ignore();
			cout << "Wrong data type, please enter integar\n";
			cin >> var;
		}
		else break;
	}
}

void swapInput() {
	cout << "Enter 11 in c1's First parameter to pause\n";
	cout << "Enter 10 in c1's First parameter to drop a hint\n";
	if (Gmode == 1) {
		cout << "Enter a negative number in c1's First parameter to Quit \n\n";
	}
	cout << "swap ( row , col ) : ";
	inputcheck(c1Row); // cin
	if (c1Row < 0) {
		if (Gmode == 1) {
			return;
		}
	}
	if (c1Row == 11) {
		system("pause");
		cout << "swap ( row , col ) : ";
		inputcheck(c1Row); inputcheck(c1Col); // cin
	}
	if (c1Row == 10)
	{
		listOfSwaps();
		Sleep(250);
		cout << "swap ( row , col ) : ";
		inputcheck(c1Row); inputcheck(c1Col); // cin 
	}
	else {
		inputcheck(c1Col); // cin
	}
}
void back() {
	int decision;
	cout << "Back <----1\t Quit<---0";
	inputcheck(decision); // cin
	if (decision)
		repeat = true;
	else
		repeat = false;
}

void checkAllBoard()
{
	bool mirrorToSwap;
	for (int i = 8; i >= 0; i--)
	{
		mirrorToSwap = false;
		checkEqualCells(i, i, mirrorToSwap);
	}
}
void livesfiller() {
	while (lives < 3) {
		Sleep(5 * 60 * 1000);
		lives++;
	}
}
void listOfSwaps()
{
	bool isAvailableHint = false;
	cout << "Hint to swap :\n";

	//check 5  equal cells
	for (int i = 0; i < 9; i++)
	{
		for (int j = 0; j < 9; j++)
		{
			//horizontal check 2 conditions
			if (board[i][j] == board[i][j + 1] && board[i][j] == board[i][j + 3] && board[i][j] == board[i][j + 4] && board[i][j] == board[i - 1][j + 2] && j <= 4 && i != 0)
			{
				//  i   2
				//  2 2 1 2 2
				cout << "cell 1: " << i << " " << j + 3;
				cout << "\tcell 2: " << i + 1 << " " << j + 3 << endl;
				isAvailableHint = true;
				break;
			}
			if (board[i][j] == board[i][j + 1] && board[i][j] == board[i][j + 3] && board[i][j] == board[i][j + 4] && board[i][j] == board[i + 1][j + 2] && j <= 4)
			{

				//  2 2 1 2 2
				//  i   2
				cout << "cell 1: " << i + 2 << " " << j + 3;
				cout << "\tcell 2: " << i + 1 << " " << j + 3 << endl;
				isAvailableHint = true;
				break;
			}
			//vertical check 2 conditions
			if (board[i][j] == board[i + 1][j] && board[i][j] == board[i + 2][j + 1] && board[i][j] == board[i + 3][j] && board[i][j] == board[i + 4][j] && i <= 4 && j != 8)
			{
				cout << "cell 1: " << i + 3 << " " << j + 2;			//2  i
				cout << "\tcell 2: " << i + 3 << " " << j + 1 << endl;	//2
				isAvailableHint = true;									//0 2
				break;													//2
																		//2
			}
			if (board[i][j] == board[i + 1][j] && board[i][j] == board[i + 2][j - 1] && board[i][j] == board[i + 3][j] && board[i][j] == board[i + 4][j] && i <= 4 && j != 0)
			{
				cout << "cell 1: " << i + 3 << " " << j;				//	2  i
				cout << "\tcell 2: " << i + 3 << " " << j + 1 << endl;	//	2
				isAvailableHint = true;									//2	0
				break;													//	2
																		//	2
			}
		}
		if (isAvailableHint) { break; }
	}

	//check 4 equal cells
	if (!isAvailableHint)
	{
		for (int i = 0; i < 9; i++)
		{
			for (int j = 0; j < 9; j++)
			{
				//horizontal check 4 conditions
				if (board[i][j] == board[i][j + 1] && board[i][j] == board[i][j + 3] && board[i][j] == board[i - 1][j + 2] && j <= 5)
				{
					//  i   2
					//  2 2 1 2
					cout << "cell 1: " << i << " " << j + 3;
					cout << "\tcell 2: " << i + 1 << " " << j + 3 << endl;
					isAvailableHint = true;
					break;
				}
				if (board[i][j] == board[i][j + 1] && board[i][j] == board[i + 1][j + 2] && board[i][j] == board[i][j + 3] && j <= 5)
				{
					//  2 2 1 2
					//  i   2
					cout << "cell 1: " << i + 2 << " " << j + 3;
					cout << "\tcell 2: " << i + 1 << " " << j + 3 << endl;
					isAvailableHint = true;
					break;
				}

				if (board[i][j] == board[i - 1][j + 1] && board[i][j] == board[i][j + 2] && board[i][j] == board[i][j + 3] && j <= 5 && i != 0)
				{
					//  i 2
					//  2 1 2 2
					cout << "cell 1: " << i << " " << j + 2;
					cout << "\tcell 2: " << i + 1 << " " << j + 2 << endl;
					isAvailableHint = true;
					break;
				}
				if (board[i][j] == board[i + 1][j + 1] && board[i][j] == board[i][j + 2] && board[i][j] == board[i][j + 3] && j <= 5 && i != 8)
				{

					//  2 0 2 2
					//  i 2
					cout << "cell 1: " << i + 1 << " " << j + 2;
					cout << "\tcell 2: " << i + 2 << " " << j + 2 << endl;
					isAvailableHint = true;
					break;
				}

				//vertical check 4 conditions
				if (board[i][j] == board[i + 1][j] && board[i][j] == board[i + 2][j + 1] && board[i][j] == board[i + 3][j] && i <= 5 && j != 8)
				{
					cout << "cell 1: " << i + 3 << " " << j + 2;			//2  i
					cout << "\tcell 2: " << i + 3 << " " << j + 1 << endl;	//2
					isAvailableHint = true;									//0 2
					break;													//2																			
				}
				if (board[i][j] == board[i + 1][j] && board[i][j] == board[i + 2][j - 1] && board[i][j] == board[i + 3][j] && i <= 5 && j != 0)
				{
					cout << "cell 1: " << i + 3 << " " << j;				//	2  i
					cout << "\tcell 2: " << i + 3 << " " << j + 1 << endl;	//	2
					isAvailableHint = true;									//2	0
					break;													//	2																			
				}

				if (board[i][j] == board[i + 1][j + 1] && board[i][j] == board[i + 2][j] && board[i][j] == board[i + 3][j] && i <= 5 && j != 8)
				{
					cout << "cell 1: " << i + 2 << " " << j + 2;			//2  i
					cout << "\tcell 2: " << i + 2 << " " << j + 1 << endl;	//0 2	
					isAvailableHint = true;									//2
					break;													//2

				}
				if (board[i][j] == board[i + 1][j - 1] && board[i][j] == board[i + 2][j] && board[i][j] == board[i + 3][j] && i <= 5 && j != 0)
				{
					cout << "cell 1: " << i + 2 << " " << j;				//	2  i
					cout << "\tcell 2: " << i + 2 << " " << j + 1 << endl;	//2 0
					isAvailableHint = true;									//	2
					break;													//	2

				}
			}
			if (isAvailableHint) { break; }
		}
	}

	//check 3 equal cells
	if (!isAvailableHint)
	{
		for (int i = 0; i < 9; i++)
		{
			for (int j = 0; j < 9; j++)
			{

				//horizontal check 8 conditions
				if (board[i][j] == board[i][j + 1] && board[i][j] == board[i][j + 3] && j <= 5)		// j>=3 Before it will go outside the board
				{
					//  i
					//  2 2 1 2
					cout << "cell 1: " << i + 1 << " " << j + 3;
					cout << "\tcell 2: " << i + 1 << " " << j + 4 << endl;
					isAvailableHint = true;
					break;
				}
				if (board[i][j] == board[i][j - 1] && board[i][j] == board[i][j - 3] && j >= 3)	// j>=3 Before it will go outside the board
				{
					//        i
					//  2 1 2 2
					cout << "cell 1: " << i + 1 << " " << j - 2;
					cout << "\tcell 2: " << i + 1 << " " << j - 1 << endl;
					isAvailableHint = true;
					break;
				}
				if (board[i][j] == board[i][j + 2] && board[i][j] == board[i - 1][j + 1] && j <= 6 && i != 0)	// j<=6 After it will go outside the board
				{
					//	i 2
					//	2 1 2
					cout << "cell 1: " << i + 1 << " " << j + 2;
					cout << "\tcell 2: " << i << " " << j + 2 << endl;
					isAvailableHint = true;
					break;
				}
				if (board[i][j] == board[i][j + 2] && board[i][j] == board[i + 1][j + 1] && j <= 6 && i != 8)	// j<=6 After it will go outside the board
				{
					//	2 1 2
					//	i 2
					cout << "cell 1: " << i + 1 << " " << j + 2;
					cout << "\tcell 2: " << i + 2 << " " << j + 2 << endl;
					isAvailableHint = true;
					break;
				}
				if (board[i][j] == board[i][j - 1] && board[i][j] == board[i - 1][j - 2] && j >= 2 && i != 0)
				{
					// 2   i
					// 0 2 2
					cout << "cell 1: " << i + 1 << " " << j - 1;
					cout << "\tcell 2: " << i << " " << j - 1 << endl;
					isAvailableHint = true;
					break;
				}
				if (board[i][j] == board[i][j - 1] && board[i][j] == board[i + 1][j - 2] && j >= 2 && i != 8)
				{
					// 0 2 2
					// 2   i
					cout << "cell 1: " << i + 2 << " " << j - 1;
					cout << "\tcell 2: " << i + 1 << " " << j - 1 << endl;
					isAvailableHint = true;
					break;
				}

				if (board[i][j] == board[i][j + 1] && board[i][j] == board[i - 1][j + 2] && j <= 6 && i != 0)
				{
					// i   2
					// 2 2 0  //j
					cout << "cell 1: " << i << " " << j + 3;
					cout << "\tcell 2: " << i + 1 << " " << j + 3 << endl;
					isAvailableHint = true;
					break;
				}
				if (board[i][j] == board[i][j + 1] && board[i][j] == board[i + 1][j + 2] && j <= 6 && i != 8)
				{
					// 2 2 0  //j
					// i   2
					cout << "cell 1: " << i + 2 << " " << j + 3;
					cout << "\tcell 2: " << i + 1 << " " << j + 3 << endl;
					isAvailableHint = true;
					break;
				}


				//vertical check 8 conditions
				if (board[i][j] == board[i + 1][j] && board[i][j] == board[i + 3][j] && i <= 6)
				{
					cout << "cell 1: " << i + 3 << " " << j + 1;          //	1  i
					cout << "\tcell 2: " << i + 4 << " " << j + 1 << endl;//	1
					isAvailableHint = true;									//	0
					break;												  //	1
				}
				if (board[i][j] == board[i - 1][j] && board[i][j] == board[i - 3][j] && j >= 3)
				{
					cout << "cell 1: " << i - 2 << " " << j + 1;	         //	1
					cout << "\tcell 2: " << i - 1 << " " << j + 1 << endl; //	0
					isAvailableHint = true;									 //	1
					break;												  //	1  i
				}
				if (board[i][j] == board[i + 2][j] && board[i][j] == board[i + 1][j + 1] && j != 8 && i <= 6)
				{
					isAvailableHint = true;
					cout << "cell 1: " << i + 2 << " " << j + 1;	        	//	1   i
					cout << "\tcell 2: " << i + 2 << " " << j + 2 << endl;	  //	0 1
					break;												      //	1
				}
				if (board[i][j] == board[i + 2][j] && board[i][j] == board[i + 1][j - 1] && j != 0 && i <= 6)
				{
					isAvailableHint = true;
					cout << "cell 1: " << i + 2 << " " << j + 1;		   //	1  i
					cout << "\tcell 2: " << i + 2 << " " << j << endl;   //  1	0 
					break;												  //    1
				}
				if (board[i][j] == board[i + 1][j] && board[i][j] == board[i + 2][j + 1] && j != 8 && i <= 6)
				{
					isAvailableHint = true;
					cout << "cell 1: " << i + 3 << " " << j + 2;	        //	1	i
					cout << "\tcell 2: " << i + 3 << " " << j + 1 << endl;	 //	1
					break;													//	0 1
				}
				if (board[i][j] == board[i - 1][j] && board[i][j] == board[i - 2][j + 1] && j != 8 && i >= 2)
				{
					isAvailableHint = true;									//	0 1
					cout << "cell 1: " << i - 1 << " " << j + 2;	          //1
					cout << "\tcell 2: " << i - 1 << " " << j + 1 << endl;	 //	1    i
					break;
				}
				if (board[i][j] == board[i + 1][j] && board[i][j] == board[i + 2][j - 1] && j != 0 && i <= 6)
				{
					isAvailableHint = true;
					cout << "cell 1: " << i + 3 << " " << j;	             //	1		//i
					cout << "\tcell 2: " << i + 3 << " " << j + 1 << endl;	 //	1
					break;													// 1 0 
				}
				if (board[i][j] == board[i - 1][j] && board[i][j] == board[i - 2][j - 1] && j != 0 && i >= 2)
				{
					isAvailableHint = true;									//1	0 
					cout << "cell 1: " << i - 1 << " " << j;	            //	1
					cout << "\tcell 2: " << i - 1 << " " << j + 1 << endl;	 //	1		//i
					break;
				}
			}
			if (isAvailableHint) { break; }
		}
	}

	if (isAvailableHint == false)
	{
		cout << "No possible swapes check this new board\n";
		boardShape(nChar);
		showFulledBoard();			// to show board after shuffle
		checkAllBoard();
		showFulledBoard();
	}
}
void startgame(player & p)
{
	char ans;
	bool rep = false;
	do
	{
		cout << "\t\tWelcome to Candy Crush Game\n\n";
		cout << "Please, Enter.. \n(p) if you're Previous Player\n(n) if you're New Player\n";
		cin >> ans;
		if (ans == 'n')
		{
			addNewPlayer(p);
			rep = true;
		}
		else if (ans == 'p')
		{
			displayplayer(p);
			rep = true;
		}
		else cout << "invalid" << endl;
	} while (rep == false);
}
int addNewPlayer(player &p)
{

	char pp[20];
	for (;;)
	{
		cout << "\nPlease, Enter Player Password : ";
		cin >> pp;

		if (Checkforpassword(pp) == false)
		{
			memset(&p, 0, sizeof(struct player));
			cout << "Please, Enter Player Name: ";
			cin >> p.name;
			strcpy(p.pass, pp);
			saveplayer(p);
			cout << "\nReacord Saved\n";
			break;
		}

		else
		{
			cout << "Opps, This Password is Already Exist\n";
		}
	}
	return 0;
}
bool Checkforpassword(char pass[20])
{
	struct player p1;
	bool fg = false;
	FILE * fpr;
	fpr = fopen(FilePath, "rb");
	if (fpr == NULL)
	{
		return false;
	}

	for (;;)
	{
		int s = fread((char*)&p1, 1, sizeof(player), fpr);
		if (s != sizeof(player)) break;
		if (strcmp(p1.pass, pass) == 0)
		{
			fg = true;
			break;
		}

	}
	fclose(fpr);
	return fg;
}
void saveplayer(struct player p1)
{
	FILE * fp;
	int fg = 0;
	fp = fopen(FilePath, "ab");
	if (fp == NULL)
		fp = fopen(FilePath, "w");

	if (fp == NULL)
	{
		cout << "No Access to Create File";
		return;
	}
	int s = fwrite((char *)&p1, 1, sizeof(player), fp);
	if (s != sizeof(player))    cout << "Can't Save player, No Disk Space\n";
	fclose(fp);
}

void  displayplayer(player &p1)
{
	char pass[20];
	for (;;)
	{
		cout << "Please, Enter Player Password : ";	cin >> pass;
		cout << "\n";
		bool rfg = readdata(p1, pass);
		if (rfg == true)
		{
			cout << "Player found :";
			break;
		}
		else
			cout << "No Player Found\n";
	}

}

bool readdata(player &p1, char pass[20])
{
	player p2;
	bool fg = false;
	FILE * fpr;
	fpr = fopen(FilePath, "rb");
	if (fpr == NULL)
	{
		cout << "File Not Found";
		return false;
	}
	for (;;)
	{
		int s = fread((char*)&p2, 1, sizeof(player), fpr);
		if (s != sizeof(player))
		{
			break;
		}
		if (strcmp(p2.pass, pass) == 0)
		{
			fg = true;
			p1 = p2;
			break;
		}
	}
	fclose(fpr);
	return fg;
}
void settings(player &p)
{
	int ans;
	do {
		cout << "\nPlease Enter..\n(1) Delete Player\n" << "(2) Go Back \n";
		inputcheck(ans); // cin
		if (ans == 1)
		{
			cout << "Enter Password";
			char pa[20]; cin >> pa;
			bool del = delplayer(pa);
			if (del == true)
				cout << "\nPlayer Is Successfully Deleted";
			else if (del == false) cout << "\nCann't Delete Player";
		}
		else if (ans == 2)
		{
			bool back = Checkforpassword(p.pass);
			if (back == true)
			{
				return;
			}
			else if (back == false)
				startgame(p); break;
		}
		else cout << "Invalid!!!" << endl;
	} while (ans != 3);
}
bool delplayer(char pass[20])
{
	struct player p1;

	FILE * fpr;
	fpr = fopen(FilePath, "rb");
	if (fpr == NULL)
	{
		cout << "File Not Found";
	}
	FILE * fpw;
	fpw = fopen(BackFilePath, "wb");
	if (fpw == NULL)
	{
		cout << "No Access to Create File";
	}
	bool deleteFG = false;
	int p = 0;
	for (;;)
	{
		int s = fread((char*)&p1, 1, sizeof(player), fpr);
		if (s != sizeof(player))
			break;
		if (strcmp(p1.pass, pass) != 0)
			fwrite((char *)&p1, sizeof(player), 1, fpw);
		else
			deleteFG = true;
	}
	if (fclose(fpr) != 0)
	{
		cout << "The errorno of fclose " << errno << endl;
	}
	fclose(fpw);

	if (deleteFG == true)
	{

		if (remove(FilePath) == 0)
		{
			int result = rename(BackFilePath, FilePath);
			if (result == 0)
				return true;
			else
				return false;
		}
		else
			perror("delete error");
	}
	else if (deleteFG == false)
	{
		remove(BackFilePath);
		return false;
	}
}

void updateScore(char pass[], int score, int mood)
{
	struct player p1;
	FILE * fpr;
	fpr = fopen("player.data", "rb");
	if (fpr == NULL)
	{
		cout << "File Not Found";
	}
	FILE * fpw;
	fpw = fopen("player.back", "wb");
	if (fpw == NULL)
	{
		cout << "No Access to Create File"; return;
	}
	int updateFG = 0;
	for (;;)
	{
		int s = fread((char*)&p1, 1, sizeof(player), fpr);
		if (s != sizeof(player))
			break;
		if (strcmp(p1.pass, pass) != 0)
			fwrite((char *)&p1, sizeof(player), 1, fpw);
		else
		{
			p1.bestscore[mood] = score;
			updateFG = 1;
			fwrite((char *)&p1, sizeof(player), 1, fpw);
		}
	}
	fclose(fpr);
	fclose(fpw);
	if (updateFG == 1)
	{
		if (remove("player.data") == 0)
		{
			int result = rename("player.back", "player.data");
			if (result == 0)
				cout << "Record is Updated :)";
			else
				cout << "Error in updating record";
		}
	}
	else remove("player.back");

}
void bestscore(player &p, int score, int mood)
{
	if (p.bestscore[mood] < score)
	{
		updateScore(p.pass, score, mood);
	}
	readdata(p, p.pass);
	cout << endl << "Best score is:" << p.bestscore[mood] << endl;
}
void leaderboard()
{
	int ch;
	do
	{
		cout << "Enter (1) for classic mood" << endl;
		cout << "Enter (2) for time attack mood " << endl;
		cout << "Enter (3) to go back " << endl;
		inputcheck(ch); // cin
		switch (ch)
		{
		case 1:
		case 2:
			ReadAllPlayers(ch - 1);
			break;
		case 3:
			return;
			break;
		}
	} while (ch != 3);

}
int ReadAllPlayers(int mood)
{
	player p[100];
	struct player p1;
	memset(&p, 0, 100 * sizeof(struct player));

	int i = 0;
	FILE * fpr;
	int count = 0;
	fpr = fopen("player.data", "rb");
	if (fpr == NULL)
	{
		cout << "File Not Found";
		return false;
	}
	for (;;)
	{
		int s = fread((char*)&p1, 1, sizeof(player), fpr);
		if (s != sizeof(player)) break;

		p[i] = p1;
		i++;

		count++;
	}
	if (count > 0) count++;
	fclose(fpr);
	int j;
	player pp;
	for (i = 0; i < (count - 1); i++)
	{
		for (j = 0; j < count - i; j++)
		{
			if (p[j].bestscore[mood] < p[j + 1].bestscore[mood])
			{
				pp = p[j];
				p[j] = p[j + 1];
				p[j + 1] = pp;
			}
		}
	}
	cout << "Name:-\t\tBest Score:- \n";
	for (i = 0; i < count - 1; i++)
	{
		cout << p[i].name << "\t\t" << p[i].bestscore[mood] << endl;
	}
	return i;
}
